{"ast":null,"code":"import { FETCH_LIST, FETCH_LIST_FAILED, SET_MESSAGE } from \"./types\";\nimport CloudService from \"../services/cloud.service\";\nimport { NotificationManager } from 'react-notifications';\nexport const fetchList = () => dispatch => {\n  return CloudService.getVmList().then(data => {\n    dispatch({\n      type: FETCH_LIST,\n      payload: {\n        vmList: data.data\n      }\n    });\n    NotificationManager.success('Virtual Machine Listed Fetched', \"Success\");\n    NotificationManager.warning(\"message\", 'Error', 3000);\n    NotificationManager.error('Error message', 'Click me!', 5000);\n    return Promise.resolve();\n  }, error => {\n    console.log(error);\n    const message = error.response && error.response.data || error.toString();\n    NotificationManager.warning(message, 'Error', 3000);\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"names":["FETCH_LIST","FETCH_LIST_FAILED","SET_MESSAGE","CloudService","NotificationManager","fetchList","dispatch","getVmList","then","data","type","payload","vmList","success","warning","error","Promise","resolve","console","log","message","response","toString","reject"],"sources":["D:/publiccloudgroup/publiccloudgroup_web_app/src/actions/cloud.js"],"sourcesContent":["import {\r\n    FETCH_LIST,\r\n    FETCH_LIST_FAILED,\r\n    SET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport CloudService from \"../services/cloud.service\";\r\nimport { NotificationManager} from 'react-notifications';\r\n\r\nexport const fetchList = () => (dispatch) => {\r\n    return CloudService.getVmList().then(\r\n        (data) => {\r\n            dispatch({\r\n                type: FETCH_LIST,\r\n                payload: { vmList: data.data },\r\n            });\r\n            NotificationManager.success('Virtual Machine Listed Fetched',\"Success\");\r\n            NotificationManager.warning(\"message\", 'Error', 3000);\r\n            NotificationManager.error('Error message', 'Click me!', 5000);\r\n            return Promise.resolve();\r\n        },\r\n        (error) => {\r\n            console.log(error)\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data) ||\r\n                error.toString();\r\n\r\n                NotificationManager.warning(message, 'Error', 3000);\r\n\r\n                \r\n            dispatch({\r\n                type: SET_MESSAGE,\r\n                payload: message,\r\n            });\r\n\r\n            return Promise.reject();\r\n        }\r\n    );\r\n};\r\n"],"mappings":"AAAA,SACIA,UADJ,EAEIC,iBAFJ,EAGIC,WAHJ,QAIO,SAJP;AAMA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,mBAAT,QAAmC,qBAAnC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAD,IAAc;EACzC,OAAOH,YAAY,CAACI,SAAb,GAAyBC,IAAzB,CACFC,IAAD,IAAU;IACNH,QAAQ,CAAC;MACLI,IAAI,EAAEV,UADD;MAELW,OAAO,EAAE;QAAEC,MAAM,EAAEH,IAAI,CAACA;MAAf;IAFJ,CAAD,CAAR;IAIAL,mBAAmB,CAACS,OAApB,CAA4B,gCAA5B,EAA6D,SAA7D;IACAT,mBAAmB,CAACU,OAApB,CAA4B,SAA5B,EAAuC,OAAvC,EAAgD,IAAhD;IACAV,mBAAmB,CAACW,KAApB,CAA0B,eAA1B,EAA2C,WAA3C,EAAwD,IAAxD;IACA,OAAOC,OAAO,CAACC,OAAR,EAAP;EACH,CAVE,EAWFF,KAAD,IAAW;IACPG,OAAO,CAACC,GAAR,CAAYJ,KAAZ;IACA,MAAMK,OAAO,GACRL,KAAK,CAACM,QAAN,IACGN,KAAK,CAACM,QAAN,CAAeZ,IADnB,IAEAM,KAAK,CAACO,QAAN,EAHJ;IAKIlB,mBAAmB,CAACU,OAApB,CAA4BM,OAA5B,EAAqC,OAArC,EAA8C,IAA9C;IAGJd,QAAQ,CAAC;MACLI,IAAI,EAAER,WADD;MAELS,OAAO,EAAES;IAFJ,CAAD,CAAR;IAKA,OAAOJ,OAAO,CAACO,MAAR,EAAP;EACH,CA3BE,CAAP;AA6BH,CA9BM"},"metadata":{},"sourceType":"module"}