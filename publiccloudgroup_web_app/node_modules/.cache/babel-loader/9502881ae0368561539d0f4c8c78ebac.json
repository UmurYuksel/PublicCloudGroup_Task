{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nimport { NotificationManager } from 'react-notifications';\nexport const login = (email, password) => dispatch => {\n  return AuthService.login(email, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    NotificationManager.error(message, 'Error!', 5000);\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","NotificationManager","login","email","password","dispatch","then","data","type","payload","user","Promise","resolve","error","message","response","toString","reject","logout"],"sources":["D:/publiccloudgroup/publiccloudgroup_web_app/src/actions/auth.js"],"sourcesContent":["import {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    SET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\nimport { NotificationManager} from 'react-notifications';\r\n\r\nexport const login = (email, password) => (dispatch) => {\r\n    return AuthService.login(email, password).then(\r\n        (data) => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: { user: data },\r\n            });\r\n\r\n            return Promise.resolve();\r\n        },\r\n        (error) => {\r\n\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data) ||\r\n                error.toString();\r\n\r\n            dispatch({\r\n                type: LOGIN_FAIL,\r\n            });\r\n\r\n            NotificationManager.error(message, 'Error!', 5000);\r\n\r\n            return Promise.reject();\r\n        }\r\n    );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n    AuthService.logout();\r\n\r\n    dispatch({\r\n        type: LOGOUT,\r\n    });\r\n};"],"mappings":"AAAA,SACIA,aADJ,EAEIC,UAFJ,EAGIC,MAHJ,EAIIC,WAJJ,QAKO,SALP;AAOA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,mBAAT,QAAmC,qBAAnC;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsBC,QAAD,IAAc;EACpD,OAAOL,WAAW,CAACE,KAAZ,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCE,IAAnC,CACFC,IAAD,IAAU;IACNF,QAAQ,CAAC;MACLG,IAAI,EAAEZ,aADD;MAELa,OAAO,EAAE;QAAEC,IAAI,EAAEH;MAAR;IAFJ,CAAD,CAAR;IAKA,OAAOI,OAAO,CAACC,OAAR,EAAP;EACH,CARE,EASFC,KAAD,IAAW;IAEP,MAAMC,OAAO,GACRD,KAAK,CAACE,QAAN,IACGF,KAAK,CAACE,QAAN,CAAeR,IADnB,IAEAM,KAAK,CAACG,QAAN,EAHJ;IAKAX,QAAQ,CAAC;MACLG,IAAI,EAAEX;IADD,CAAD,CAAR;IAIAI,mBAAmB,CAACY,KAApB,CAA0BC,OAA1B,EAAmC,QAAnC,EAA6C,IAA7C;IAEA,OAAOH,OAAO,CAACM,MAAR,EAAP;EACH,CAvBE,CAAP;AAyBH,CA1BM;AA4BP,OAAO,MAAMC,MAAM,GAAG,MAAOb,QAAD,IAAc;EACtCL,WAAW,CAACkB,MAAZ;EAEAb,QAAQ,CAAC;IACLG,IAAI,EAAEV;EADD,CAAD,CAAR;AAGH,CANM"},"metadata":{},"sourceType":"module"}