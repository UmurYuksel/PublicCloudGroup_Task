{"ast":null,"code":"import { FETCH_LIST } from \"./types\";\nimport CloudService from \"../services/cloud.service\";\nimport { NotificationManager } from 'react-notifications';\nexport const fetchList = () => dispatch => {\n  return CloudService.getVmList().then(data => {\n    dispatch({\n      type: FETCH_LIST,\n      payload: {\n        vmList: data.data\n      }\n    });\n    NotificationManager.success('Virtual Machine Listed Fetched', \"Success\");\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data || error.toString();\n    NotificationManager.error(message, 'Click me!', 5000);\n    return Promise.reject();\n  });\n};\nexport const activateMachine = _ref => {\n  let {\n    instanceName,\n    zone\n  } = _ref;\n  return dispatch => {\n    return CloudService.activateMachine({\n      instanceName,\n      zone\n    }).then(data => {\n      dispatch({\n        type: FETCH_LIST,\n        payload: {\n          vmList: data.data\n        }\n      });\n      NotificationManager.success(instanceName + 'Virtual Machine Has Been Listed Activated', \"Success\");\n      return Promise.resolve();\n    }, error => {\n      console.log(error);\n      const message = error.response && error.response.data || error.toString();\n      NotificationManager.error(message, 'Error!', 5000);\n      return Promise.reject();\n    });\n  };\n};","map":{"version":3,"names":["FETCH_LIST","CloudService","NotificationManager","fetchList","dispatch","getVmList","then","data","type","payload","vmList","success","Promise","resolve","error","message","response","toString","reject","activateMachine","instanceName","zone","console","log"],"sources":["D:/publiccloudgroup/publiccloudgroup_web_app/src/actions/cloud.js"],"sourcesContent":["import {\r\n    FETCH_LIST,\r\n} from \"./types\";\r\n\r\nimport CloudService from \"../services/cloud.service\";\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\nexport const fetchList = () => (dispatch) => {\r\n    return CloudService.getVmList().then(\r\n        (data) => {\r\n            dispatch({\r\n                type: FETCH_LIST,\r\n                payload: { vmList: data.data },\r\n            });\r\n\r\n            NotificationManager.success('Virtual Machine Listed Fetched', \"Success\");\r\n\r\n            return Promise.resolve();\r\n        },\r\n        (error) => {\r\n\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data) ||\r\n                error.toString();\r\n\r\n            NotificationManager.error(message, 'Click me!', 5000);\r\n\r\n            return Promise.reject();\r\n        }\r\n    );\r\n};\r\n\r\nexport const activateMachine = ({instanceName, zone}) => (dispatch) => {\r\n\r\n        return CloudService.activateMachine({instanceName, zone}).then(\r\n            (data) => {\r\n                dispatch({\r\n                    type: FETCH_LIST,\r\n                    payload: { vmList: data.data },\r\n                });\r\n\r\n                NotificationManager.success(instanceName + 'Virtual Machine Has Been Listed Activated', \"Success\");\r\n\r\n                return Promise.resolve();\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n                const message =\r\n                    (error.response &&\r\n                        error.response.data) ||\r\n                    error.toString();\r\n\r\n                NotificationManager.error(message, 'Error!', 5000);\r\n\r\n                return Promise.reject();\r\n            }\r\n\r\n        );\r\n\r\n};"],"mappings":"AAAA,SACIA,UADJ,QAEO,SAFP;AAIA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAD,IAAc;EACzC,OAAOH,YAAY,CAACI,SAAb,GAAyBC,IAAzB,CACFC,IAAD,IAAU;IACNH,QAAQ,CAAC;MACLI,IAAI,EAAER,UADD;MAELS,OAAO,EAAE;QAAEC,MAAM,EAAEH,IAAI,CAACA;MAAf;IAFJ,CAAD,CAAR;IAKAL,mBAAmB,CAACS,OAApB,CAA4B,gCAA5B,EAA8D,SAA9D;IAEA,OAAOC,OAAO,CAACC,OAAR,EAAP;EACH,CAVE,EAWFC,KAAD,IAAW;IAEP,MAAMC,OAAO,GACRD,KAAK,CAACE,QAAN,IACGF,KAAK,CAACE,QAAN,CAAeT,IADnB,IAEAO,KAAK,CAACG,QAAN,EAHJ;IAKAf,mBAAmB,CAACY,KAApB,CAA0BC,OAA1B,EAAmC,WAAnC,EAAgD,IAAhD;IAEA,OAAOH,OAAO,CAACM,MAAR,EAAP;EACH,CArBE,CAAP;AAuBH,CAxBM;AA0BP,OAAO,MAAMC,eAAe,GAAG;EAAA,IAAC;IAACC,YAAD;IAAeC;EAAf,CAAD;EAAA,OAA2BjB,QAAD,IAAc;IAE/D,OAAOH,YAAY,CAACkB,eAAb,CAA6B;MAACC,YAAD;MAAeC;IAAf,CAA7B,EAAmDf,IAAnD,CACFC,IAAD,IAAU;MACNH,QAAQ,CAAC;QACLI,IAAI,EAAER,UADD;QAELS,OAAO,EAAE;UAAEC,MAAM,EAAEH,IAAI,CAACA;QAAf;MAFJ,CAAD,CAAR;MAKAL,mBAAmB,CAACS,OAApB,CAA4BS,YAAY,GAAG,2CAA3C,EAAwF,SAAxF;MAEA,OAAOR,OAAO,CAACC,OAAR,EAAP;IACH,CAVE,EAWFC,KAAD,IAAW;MACPQ,OAAO,CAACC,GAAR,CAAYT,KAAZ;MACA,MAAMC,OAAO,GACRD,KAAK,CAACE,QAAN,IACGF,KAAK,CAACE,QAAN,CAAeT,IADnB,IAEAO,KAAK,CAACG,QAAN,EAHJ;MAKAf,mBAAmB,CAACY,KAApB,CAA0BC,OAA1B,EAAmC,QAAnC,EAA6C,IAA7C;MAEA,OAAOH,OAAO,CAACM,MAAR,EAAP;IACH,CArBE,CAAP;EAyBP,CA3B8B;AAAA,CAAxB"},"metadata":{},"sourceType":"module"}