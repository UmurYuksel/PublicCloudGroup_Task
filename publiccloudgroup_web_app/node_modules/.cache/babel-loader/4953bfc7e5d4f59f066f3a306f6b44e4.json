{"ast":null,"code":"import { FETCH_LIST, FETCH_LIST_FAILED, SET_MESSAGE } from \"./types\";\nimport CloudService from \"../services/cloud.service\";\nimport { NotificationManager } from 'react-notifications';\nexport const fetchList = () => dispatch => {\n  return CloudService.getVmList().then(data => {\n    dispatch({\n      type: FETCH_LIST,\n      payload: {\n        vmList: data.data\n      }\n    });\n    NotificationManager.success('Virtual Machine Listed Fetched', \"Success\");\n    return Promise.resolve();\n  }, error => {\n    console.log(error);\n    const message = error.response && error.response.data || error.toString();\n    NotificationManager.error(message, 'Click me!', 5000);\n    return Promise.reject();\n  });\n};\nexport const changeMachineStatus = operatinType => dispatch => {\n  if (operatinType === \"TERMINATED\") {\n    return CloudService.activateMachine().then(data => {\n      dispatch({\n        type: FETCH_LIST,\n        payload: {\n          vmList: data.data\n        }\n      });\n      NotificationManager.success('Virtual Machine Listed Fetched', \"Success\");\n      return Promise.resolve();\n    }, error => {\n      console.log(error);\n      const message = error.response && error.response.data || error.toString();\n      NotificationManager.error(message, 'Click me!', 5000);\n      return Promise.reject();\n    });\n  }\n\n  return CloudService.getVmList().then(data => {\n    dispatch({\n      type: FETCH_LIST,\n      payload: {\n        vmList: data.data\n      }\n    });\n    NotificationManager.success('Virtual Machine Listed Fetched', \"Success\");\n    return Promise.resolve();\n  }, error => {\n    console.log(error);\n    const message = error.response && error.response.data || error.toString();\n    NotificationManager.error(message, 'Click me!', 5000);\n    return Promise.reject();\n  });\n};","map":{"version":3,"names":["FETCH_LIST","FETCH_LIST_FAILED","SET_MESSAGE","CloudService","NotificationManager","fetchList","dispatch","getVmList","then","data","type","payload","vmList","success","Promise","resolve","error","console","log","message","response","toString","reject","changeMachineStatus","operatinType","activateMachine"],"sources":["D:/publiccloudgroup/publiccloudgroup_web_app/src/actions/cloud.js"],"sourcesContent":["import {\r\n    FETCH_LIST,\r\n    FETCH_LIST_FAILED,\r\n    SET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport CloudService from \"../services/cloud.service\";\r\nimport { NotificationManager} from 'react-notifications';\r\n\r\nexport const fetchList = () => (dispatch) => {\r\n    return CloudService.getVmList().then(\r\n        (data) => {\r\n            dispatch({\r\n                type: FETCH_LIST,\r\n                payload: { vmList: data.data },\r\n            });\r\n\r\n            NotificationManager.success('Virtual Machine Listed Fetched',\"Success\");\r\n \r\n            return Promise.resolve();\r\n        },\r\n        (error) => {\r\n            console.log(error)\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data) ||\r\n                error.toString();\r\n\r\n            NotificationManager.error(message, 'Click me!', 5000);\r\n             \r\n            return Promise.reject();\r\n        }\r\n    );\r\n};\r\n\r\nexport const changeMachineStatus = (operatinType) => (dispatch) => {\r\n\r\n   if(operatinType===\"TERMINATED\") {\r\n    return CloudService.activateMachine().then(\r\n        (data) => {\r\n            dispatch({\r\n                type: FETCH_LIST,\r\n                payload: { vmList: data.data },\r\n            });\r\n            \r\n            NotificationManager.success('Virtual Machine Listed Fetched',\"Success\");\r\n \r\n            return Promise.resolve();\r\n        },\r\n        (error) => {\r\n            console.log(error)\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data) ||\r\n                error.toString();\r\n\r\n            NotificationManager.error(message, 'Click me!', 5000);\r\n             \r\n            return Promise.reject();\r\n        }\r\n    );\r\n   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return CloudService.getVmList().then(\r\n        (data) => {\r\n            dispatch({\r\n                type: FETCH_LIST,\r\n                payload: { vmList: data.data },\r\n            });\r\n            \r\n            NotificationManager.success('Virtual Machine Listed Fetched',\"Success\");\r\n \r\n            return Promise.resolve();\r\n        },\r\n        (error) => {\r\n            console.log(error)\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data) ||\r\n                error.toString();\r\n\r\n            NotificationManager.error(message, 'Click me!', 5000);\r\n             \r\n            return Promise.reject();\r\n        }\r\n    );\r\n};"],"mappings":"AAAA,SACIA,UADJ,EAEIC,iBAFJ,EAGIC,WAHJ,QAIO,SAJP;AAMA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,mBAAT,QAAmC,qBAAnC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAD,IAAc;EACzC,OAAOH,YAAY,CAACI,SAAb,GAAyBC,IAAzB,CACFC,IAAD,IAAU;IACNH,QAAQ,CAAC;MACLI,IAAI,EAAEV,UADD;MAELW,OAAO,EAAE;QAAEC,MAAM,EAAEH,IAAI,CAACA;MAAf;IAFJ,CAAD,CAAR;IAKAL,mBAAmB,CAACS,OAApB,CAA4B,gCAA5B,EAA6D,SAA7D;IAEA,OAAOC,OAAO,CAACC,OAAR,EAAP;EACH,CAVE,EAWFC,KAAD,IAAW;IACPC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,MAAMG,OAAO,GACRH,KAAK,CAACI,QAAN,IACGJ,KAAK,CAACI,QAAN,CAAeX,IADnB,IAEAO,KAAK,CAACK,QAAN,EAHJ;IAKAjB,mBAAmB,CAACY,KAApB,CAA0BG,OAA1B,EAAmC,WAAnC,EAAgD,IAAhD;IAEA,OAAOL,OAAO,CAACQ,MAAR,EAAP;EACH,CArBE,CAAP;AAuBH,CAxBM;AA0BP,OAAO,MAAMC,mBAAmB,GAAIC,YAAD,IAAmBlB,QAAD,IAAc;EAEhE,IAAGkB,YAAY,KAAG,YAAlB,EAAgC;IAC/B,OAAOrB,YAAY,CAACsB,eAAb,GAA+BjB,IAA/B,CACFC,IAAD,IAAU;MACNH,QAAQ,CAAC;QACLI,IAAI,EAAEV,UADD;QAELW,OAAO,EAAE;UAAEC,MAAM,EAAEH,IAAI,CAACA;QAAf;MAFJ,CAAD,CAAR;MAKAL,mBAAmB,CAACS,OAApB,CAA4B,gCAA5B,EAA6D,SAA7D;MAEA,OAAOC,OAAO,CAACC,OAAR,EAAP;IACH,CAVE,EAWFC,KAAD,IAAW;MACPC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACA,MAAMG,OAAO,GACRH,KAAK,CAACI,QAAN,IACGJ,KAAK,CAACI,QAAN,CAAeX,IADnB,IAEAO,KAAK,CAACK,QAAN,EAHJ;MAKAjB,mBAAmB,CAACY,KAApB,CAA0BG,OAA1B,EAAmC,WAAnC,EAAgD,IAAhD;MAEA,OAAOL,OAAO,CAACQ,MAAR,EAAP;IACH,CArBE,CAAP;EAuBA;;EAOA,OAAOnB,YAAY,CAACI,SAAb,GAAyBC,IAAzB,CACFC,IAAD,IAAU;IACNH,QAAQ,CAAC;MACLI,IAAI,EAAEV,UADD;MAELW,OAAO,EAAE;QAAEC,MAAM,EAAEH,IAAI,CAACA;MAAf;IAFJ,CAAD,CAAR;IAKAL,mBAAmB,CAACS,OAApB,CAA4B,gCAA5B,EAA6D,SAA7D;IAEA,OAAOC,OAAO,CAACC,OAAR,EAAP;EACH,CAVE,EAWFC,KAAD,IAAW;IACPC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,MAAMG,OAAO,GACRH,KAAK,CAACI,QAAN,IACGJ,KAAK,CAACI,QAAN,CAAeX,IADnB,IAEAO,KAAK,CAACK,QAAN,EAHJ;IAKAjB,mBAAmB,CAACY,KAApB,CAA0BG,OAA1B,EAAmC,WAAnC,EAAgD,IAAhD;IAEA,OAAOL,OAAO,CAACQ,MAAR,EAAP;EACH,CArBE,CAAP;AAuBH,CAxDM"},"metadata":{},"sourceType":"module"}